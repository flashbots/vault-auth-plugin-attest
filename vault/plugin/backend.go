package plugin

import (
	"sync"
	"time"

	app "github.com/flashbots/vault-auth-plugin-attest/config"
	"github.com/flashbots/vault-auth-plugin-attest/globals"
	"github.com/hashicorp/vault/sdk/framework"
	"github.com/hashicorp/vault/sdk/logical"
	"github.com/pquerna/otp/totp"

	cache "github.com/patrickmn/go-cache"
)

type backend struct {
	*sync.RWMutex
	*framework.Backend

	totpOptions   totp.ValidateOpts
	totpUsedCodes *cache.Cache
}

const helpBackend = `
The "vault-auth-plugin-attest" plugin allows attested authentication.
Firstly, a client connects to Vault and exchanges TOTP code (generated using
pre-shared TOTP-secret) for the nonce generated by the plugin. Then the client
generates attestation quote that includes provided nonce, and connects to Vault
again, this time providing another TOTP code together with the attestation
quote. The plugin verifies the attestation quote for genuineness, verifies its
measurements and other characteristics (as per configuration), and issues the
client token in case if the validation and verifications are ok.
`

func newBackend(cfg *app.Config) *backend {
	b := &backend{
		totpUsedCodes: cache.New(globals.TOTPPeriod, globals.TOTPPeriod),

		totpOptions: totp.ValidateOpts{
			Algorithm: globals.TOTPAlgorithm,
			Digits:    globals.TOTPDigits,
			Period:    uint(globals.TOTPPeriod / time.Second),
			Skew:      1,
		},
	}

	b.Backend = &framework.Backend{
		BackendType:    logical.TypeCredential,
		Help:           helpBackend,
		RunningVersion: cfg.Version,

		// TODO: AuthRenew: b.loginRenew,

		Paths: []*framework.Path{
			pathTDX(b),
			pathTDXList(b),
			pathTDXNonce(b),
			pathTDXLogin(b),
		},

		PathsSpecial: &logical.Paths{
			Unauthenticated: []string{
				"tdx/+/nonce",
				"tdx/+/login",
			},
		},
	}

	return b
}
